usefull ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# 

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

ll /bin /usr/bin | sort | less
# Поскольку в  команде указаны два каталога (/bin и  /usr/bin), вывод команды 
# ll будет состоять из двух сортированных списков, по одному для каждого каталога.
# Добавив команду sort в конвейер, мы изменили данные, чтобы получить единый
# сортированный список

ll /bin /usr/bin | sort | uniq | less
# В этом примере мы использовали uniq для удаления любых повторяющихся строк в 
# выводе команды sort . Если бы нам потребовалось, наоборот, получить список
# дубликатов, мы добавили бы в команду uniq параметр -d

ll /bin /usr/bin | sort | grep zip
# найти все файлы в  списке программ, которые имеют в своем имени 
# последовательность символов zip . Результаты такого поиска могут подсказать 
# нам, какие программы в системе имеют отношение к сжатию файлов.
# Команда grep имеет пару удобных параметров: -i требует от grep игнорировать
# регистр символов в процессе поиска (обычно поиск выполняется с учетом регистра 
# символов), -v требует от grep выводить только строки, где совпадение с шаблоном 
# не найдено.

ll /dev
# получить список устройств

sudo tail -f /var/log/syslog
# Эта команда выведет несколько последних строк из файла и приостановится.
# представляет собой отличный способ наблюдения за происходящим в системе в 
# режиме реального времени

sudo mount -t iso9660 -o loop Downloads/ubuntu.iso ISO/ubuntu/
# После монтирования образа с ним можно работать как с настоящим диском CD-ROM 
# или DVD. Не забудьте размонтировать образ, когда он станет не нужен

ssh -X root@ip_adress
# создание VPN соединения для возможности запуска удалённых программ с графическим
# интерфейсом как локальных (например gedit для редактирования кода на стороне 
# удалённой машины)

scp root@ip_adress:example_file.txt .
# использует шифрованный туннель SSH для копирования файлов по сети

xargs --show-limits
# показывает лимиты аргументной строки и не только

mkdir -p playground/dir-{00{1..9},0{10..99},100}
touch playground/dir-{00{1..9},0{10..99},100}/file-{A..Z}
# Эти две строки создают каталог playground , содержащий 100 подкаталогов и 
# 26 пустых файлов в каждом. Объединив команду mkdir с параметром -p (который 
# вынуждает mkdir создать родительские каталоги в указанном пути) с подстановкой 
# фигурных скобок, мы смогли создать 100 каталогов.

du -s /usr/share/* | sort -nr | head
# команда du выводит результаты, отсортированные по именам каталогов
# В этом примере мы передали результаты по конвейеру программе head, чтобы
# ограничить число результатов первыми 10 строками.
# С помощью параметров -nr мы получили сортировку по числовым значениям в 
# обратном порядке, в результате наибольшие значения оказались в начале списка. 
# Такой способ сортировки стал возможен, потому что числовые значения находятся 
# в начале каждой строки.