usefull ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# 

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

help имя_команды 
# bash имеет встроенную справку для каждой встроенной команды. Чтобы получить 
# ее, введите help с именем встроенной команды.

--help
# Многие выполняемые программы поддерживают параметр --help для вывода 
# описания синтаксиса и параметров, поддерживаемых командой.

type имя_команды
# сообщает, как интерпретируется имя указанной команды

mkdir ex_{1..5}
# создаёт 5 папок.

printenv | less
# получить список доступных переменых

set | less
# Последние версии bash реализуют механизм программируемого дополнения. 
# Программируемое дополнение дает возможность добавлять дополнительные правила. 
# Обычно это делается с  целью добавить поддержку определенных приложений. 
# Например, можно добавить дополнение списка параметров команды или файлов 
# определенного типа, поддерживаемых приложением. В Ubuntu определено огромное 
# множество таких правил. Программируемое дополнение реализуется посредством 
# функций командной оболочки — небольших мини-сценариев

history | grep /usr/bin
# найти команды в истории, использовавшиеся для получения списка содержимого 
# /usr/bin.

!94
# Здесь число 94  — это порядковый номер записи команды в списке истории. Зная 
# это число, можно воспользоваться еще одной разновидностью подстановки, которая
# называется подстановкой записей истории (history expansion).

su - pythman
# cменить пользователя

jobs
# выводит список работающих программ

kill 6080
# убить работающую программу по идентификатору фонового процесса

kill -l
# получить полный список сигналов

apt-cache search имя_пакета
# ищет пакет в репозитории по имени

apt-cache show имя_пакета
# получить описание пакета

apt-get install имя_пакета
# установка пакета из репозитория

dpkg install имя_пакета
# Если файл пакета загружен из источника, не являющегося репозиторием, его
# можно установить непосредственно (без разрешения зависимостей) с использованием 
# низкоуровневого инструмента

apt-get remove имя_пакета
# удалить установленный пакет

apt-get update; apt-get upgrade
# следующая команда применит все обновления, доступные для пакетов, установленных 
# в системе на основе Debian

dpkg -i|--install имя_пакета
# низкоуровневая праграмма обновления пакета

dpkg -l|--list
# вывод списка всех пакетов, установленных в системе

dpkg -s|--status имя_пакета
# С помощью низкоуровневого инструмента можно определить, был-ли установлен 
# определенный пакет.

dbkg --info имя_пакета
# Для проверки файлов архивов

dpkg --contents имя_пакета
# для вывода списка файлов в пакете

dpkg --search имя_файла
# Команды идентификации принадлежности файлов
# Определить, в составе какого пакета был установлен некий файл

ln -s файл имя_ссылки
# создаётся «символьная» ссылка (symbolic link)